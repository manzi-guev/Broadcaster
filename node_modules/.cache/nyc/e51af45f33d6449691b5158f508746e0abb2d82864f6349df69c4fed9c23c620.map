{"version":3,"sources":["userController.js"],"names":["userController","req","res","body","firstname","lastname","email","phonenumber","username","password","newUser","id","users","length","bcrypt","hashSync","check","find","u","push","status","json","token","message","data","error","findUser","compareSync"],"mappings":";;;;;;qjBAAA;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEMA,c;;;;;;;2BACUC,G,EAAKC,G,EAAK;AAAA,sBAQlBD,IAAIE,IARc;AAAA,UAEpBC,SAFoB,aAEpBA,SAFoB;AAAA,UAGpBC,QAHoB,aAGpBA,QAHoB;AAAA,UAIpBC,KAJoB,aAIpBA,KAJoB;AAAA,UAKpBC,WALoB,aAKpBA,WALoB;AAAA,UAMpBC,QANoB,aAMpBA,QANoB;AAAA,UAOpBC,QAPoB,aAOpBA,QAPoB;;AAStB,UAAMC,UAAU;AACdC,YAAIC,gBAAMC,MAAN,GAAe,CADL;AAEdT,4BAFc;AAGdC,0BAHc;AAIdC,oBAJc;AAKdC,gCALc;AAMdC,0BANc;AAOdC,kBAAUK,mBAAOC,QAAP,CAAgBN,QAAhB,EAA0B,EAA1B;AAPI,OAAhB;AASA,UAAMO,QAAQJ,gBAAMK,IAAN,CAAW;AAAA,eAAKC,EAAEZ,KAAF,KAAYA,KAAjB;AAAA,OAAX,CAAd;AACA,UAAI,CAACU,KAAL,EAAY;AACVJ,wBAAMO,IAAN,CAAWT,OAAX;AACA,eAAOR,IAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,iBAAO,qBAAehB,KAAf,CAFmB;AAG1BiB,mBAAS,0BAHiB;AAI1BC,gBAAMd;AAJoB,SAArB,CAAP;AAMD;AACD,aAAOR,IAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BK,eAAO;AAFmB,OAArB,CAAP;AAID;;;2BAEaxB,G,EAAKC,G,EAAK;AAAA,uBACMD,IAAIE,IADV;AAAA,UACdG,KADc,cACdA,KADc;AAAA,UACPG,QADO,cACPA,QADO;;AAEtB,UAAMiB,WAAWd,gBAAMK,IAAN,CAAW;AAAA,eAAKC,EAAEZ,KAAF,KAAYA,KAAjB;AAAA,OAAX,CAAjB;AACA,UAAI,CAACoB,QAAL,EAAe;AACb,eAAOxB,IAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BK,iBAAO;AAFmB,SAArB,CAAP;AAID;AACD,UAAIX,mBAAOa,WAAP,CAAmBlB,QAAnB,EAA6BiB,SAASjB,QAAtC,CAAJ,EAAqD;AACnD,eAAOP,IAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,iBAAO,qBAAehB,KAAf,CAFmB;AAG1BiB,mBAAS;AAHiB,SAArB,CAAP;AAKD;AACD,aAAOrB,IAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BK,eAAO;AAFmB,OAArB,CAAP;AAID;;;;;;kBAEYzB,c","file":"userController.js","sourceRoot":"C:/Users/CharisUAS/Desktop/Broadcaster/server/controllers","sourcesContent":["/* eslint-disable node/no-unsupported-features/es-syntax */\r\nimport bcrypt from 'bcryptjs';\r\nimport users from '../models/users';\r\nimport tokengenerator from '../helpers/token.helper';\r\n\r\nclass userController {\r\n  static signup(req, res) {\r\n    const {\r\n      firstname,\r\n      lastname,\r\n      email,\r\n      phonenumber,\r\n      username,\r\n      password\r\n    } = req.body;\r\n    const newUser = {\r\n      id: users.length + 1,\r\n      firstname,\r\n      lastname,\r\n      email,\r\n      phonenumber,\r\n      username,\r\n      password: bcrypt.hashSync(password, 10)\r\n    };\r\n    const check = users.find(u => u.email === email);\r\n    if (!check) {\r\n      users.push(newUser);\r\n      return res.status(201).json({\r\n        status: 201,\r\n        token: tokengenerator(email),\r\n        message: 'User succesfully created',\r\n        data: newUser\r\n      });\r\n    }\r\n    return res.status(409).json({\r\n      status: 409,\r\n      error: 'User already exists'\r\n    });\r\n  }\r\n\r\n  static signin(req, res) {\r\n    const { email, password } = req.body;\r\n    const findUser = users.find(u => u.email === email);\r\n    if (!findUser) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'User with provided email doesnt exist'\r\n      });\r\n    }\r\n    if (bcrypt.compareSync(password, findUser.password)) {\r\n      return res.status(200).json({\r\n        status: 200,\r\n        token: tokengenerator(email),\r\n        message: 'User successfully logged in'\r\n      });\r\n    }\r\n    return res.status(401).json({\r\n      status: 401,\r\n      error: 'Password is incorrect'\r\n    });\r\n  }\r\n}\r\nexport default userController;\r\n"]}
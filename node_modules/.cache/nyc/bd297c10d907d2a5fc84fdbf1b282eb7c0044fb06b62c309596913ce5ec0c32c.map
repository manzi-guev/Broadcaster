{"version":3,"sources":["redflagController.js"],"names":["redflagController","req","res","newRedflag","redflag","create","status","json","message","data","all","redflags","length","error","found","findRedFlag","parseInt","params","id","deleteRedFlag","updated","commentRedflag","body","comment","locationRedflag","location"],"mappings":";;;;;;qjBAAA;AACA;;;AACA;;;;IAEMA,iB;;;;;;;2BACUC,G,EAAKC,G,EAAK;AACtB,UAAMC,aAAaC,kBAAQC,MAAR,CAAeJ,GAAf,CAAnB;AACA,aAAOC,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BE,iBAAS,8BAFiB;AAG1BC,cAAMN;AAHoB,OAArB,CAAP;AAKD;;;iCAEmBF,G,EAAKC,G,EAAK;AAC5B,UAAMQ,MAAMC,kBAAZ;AACA,UAAID,IAAIE,MAAJ,KAAe,CAAnB,EAAsB;AACpB,eAAOV,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BO,iBAAO;AAFmB,SAArB,CAAP;AAID;AACD,aAAOX,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BE,iBAAS,gCAFiB;AAG1BC,cAAME;AAHoB,OAArB,CAAP;AAKD;;;qCAEuBV,G,EAAKC,G,EAAK;AAChC,UAAMY,QAAQV,kBAAQW,WAAR,CAAoBC,SAASf,IAAIgB,MAAJ,CAAWC,EAApB,EAAwB,EAAxB,CAApB,CAAd;AACA,UAAIJ,KAAJ,EAAW;AACT,eAAOZ,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BG,gBAAMK;AAFoB,SAArB,CAAP;AAID;AACD,aAAOZ,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BO,eAAO;AAFmB,OAArB,CAAP;AAID;;;4BAEaZ,G,EAAKC,G,EAAK;AACtBE,wBAAQe,aAAR,CAAsBH,SAASf,IAAIgB,MAAJ,CAAWC,EAApB,EAAwB,EAAxB,CAAtB;AACA;AACA,aAAOhB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BE,iBAAS;AAFiB,OAArB,CAAP;AAID;;;gCAEkBP,G,EAAKC,G,EAAK;AAC3B,UAAMkB,UAAUhB,kBAAQiB,cAAR,CACdL,SAASf,IAAIgB,MAAJ,CAAWC,EAApB,EAAwB,EAAxB,CADc,EAEdjB,IAAIqB,IAAJ,CAASC,OAFK,CAAhB;AAIA,aAAOrB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BE,iBAAS,0BAFiB;AAG1BC,cAAM;AACJS,cAAIE,QAAQF,EADR;AAEJK,mBAASH,QAAQG;AAFb;AAHoB,OAArB,CAAP;AAQD;;;iCAEmBtB,G,EAAKC,G,EAAK;AAC5B,UAAMkB,UAAUhB,kBAAQoB,eAAR,CACdR,SAASf,IAAIgB,MAAJ,CAAWC,EAApB,EAAwB,EAAxB,CADc,EAEdjB,IAAIqB,IAAJ,CAASG,QAFK,CAAhB;AAIA,aAAOvB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BE,iBAAS,2BAFiB;AAG1BC,cAAM;AACJS,cAAIE,QAAQF,EADR;AAEJK,mBAASH,QAAQK;AAFb;AAHoB,OAArB,CAAP;AAQD;;;;;;kBAGYzB,iB","file":"redflagController.js","sourceRoot":"C:/Users/CharisUAS/Desktop/Broadcaster/server/v1/controllers","sourcesContent":["/* eslint-disable consistent-return */\r\n/* eslint-disable node/no-unsupported-features/es-syntax */\r\nimport { redflags, redflag } from '../models/redflags';\r\n\r\nclass redflagController {\r\n  static create(req, res) {\r\n    const newRedflag = redflag.create(req);\r\n    return res.status(201).json({\r\n      status: 201,\r\n      message: 'Redflag successfully created',\r\n      data: newRedflag\r\n    });\r\n  }\r\n\r\n  static viewredflags(req, res) {\r\n    const all = redflags;\r\n    if (all.length === 0) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Redflags not found'\r\n      });\r\n    }\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Success. List of all red-flags',\r\n      data: redflags\r\n    });\r\n  }\r\n\r\n  static viewSpecificflag(req, res) {\r\n    const found = redflag.findRedFlag(parseInt(req.params.id, 10));\r\n    if (found) {\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: found\r\n      });\r\n    }\r\n    return res.status(404).json({\r\n      status: 404,\r\n      error: 'Redflag not found'\r\n    });\r\n  }\r\n\r\n  static delete(req, res) {\r\n    redflag.deleteRedFlag(parseInt(req.params.id, 10));\r\n    /* istanbul ignore else */\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Redflag successfully deleted'\r\n    });\r\n  }\r\n\r\n  static editComment(req, res) {\r\n    const updated = redflag.commentRedflag(\r\n      parseInt(req.params.id, 10),\r\n      req.body.comment\r\n    );\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Updated red-flag comment',\r\n      data: {\r\n        id: updated.id,\r\n        comment: updated.comment\r\n      }\r\n    });\r\n  }\r\n\r\n  static editLocation(req, res) {\r\n    const updated = redflag.locationRedflag(\r\n      parseInt(req.params.id, 10),\r\n      req.body.location\r\n    );\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Updated red-flag location',\r\n      data: {\r\n        id: updated.id,\r\n        comment: updated.location\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default redflagController;\r\n"]}
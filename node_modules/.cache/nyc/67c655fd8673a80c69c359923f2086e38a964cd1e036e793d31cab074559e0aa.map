{"version":3,"sources":["userController.js"],"names":["userController","req","res","email","body","check","userModel","signup","status","json","token","message","data","users","length","error","password","findUser","find","u","bcrypt","compareSync"],"mappings":";;;;;;qjBAAA;;;AACA;;;;AACA;;AACA;;;;;;;;IAEMA,c;;;;;;;2BACUC,G,EAAKC,G,EAAK;AAAA,UACdC,KADc,GACJF,IAAIG,IADA,CACdD,KADc;;AAEtB,UAAME,QAAQC,iBAAUC,MAAV,CAAiBN,GAAjB,CAAd;AACA,UAAII,KAAJ,EAAW;AACT,eAAOH,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,iBAAO,2BAAeP,KAAf,CAFmB;AAG1BQ,mBAAS,0BAHiB;AAI1BC,gBAAMC,aAAMA,aAAMC,MAAN,GAAe,CAArB;AAJoB,SAArB,CAAP;AAMD;AACD,aAAOZ,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BO,eAAO;AAFmB,OAArB,CAAP;AAID;;;2BAEad,G,EAAKC,G,EAAK;AAAA,sBACMD,IAAIG,IADV;AAAA,UACdD,KADc,aACdA,KADc;AAAA,UACPa,QADO,aACPA,QADO;;AAEtB,UAAMC,WAAWJ,aAAMK,IAAN,CAAW;AAAA,eAAKC,EAAEhB,KAAF,KAAYA,KAAjB;AAAA,OAAX,CAAjB;AACA,UAAI,CAACc,QAAL,EAAe;AACb,eAAOf,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BO,iBAAO;AAFmB,SAArB,CAAP;AAID;AACD,UAAIK,mBAAOC,WAAP,CAAmBL,QAAnB,EAA6BC,SAASD,QAAtC,CAAJ,EAAqD;AACnD,eAAOd,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,iBAAO,2BAAeP,KAAf,CAFmB;AAG1BQ,mBAAS;AAHiB,SAArB,CAAP;AAKD;AACD,aAAOT,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BO,eAAO;AAFmB,OAArB,CAAP;AAID;;;;;;kBAEYf,c","file":"userController.js","sourceRoot":"C:/Users/CharisUAS/Desktop/Broadcaster/server/controllers","sourcesContent":["/* eslint-disable node/no-unsupported-features/es-syntax */\r\nimport bcrypt from 'bcryptjs';\r\nimport { users, userModel } from '../models/users';\r\nimport tokengenerator from '../helpers/helperToken';\r\n\r\nclass userController {\r\n  static signup(req, res) {\r\n    const { email } = req.body;\r\n    const check = userModel.signup(req);\r\n    if (check) {\r\n      return res.status(201).json({\r\n        status: 201,\r\n        token: tokengenerator(email),\r\n        message: 'User succesfully created',\r\n        data: users[users.length - 1]\r\n      });\r\n    }\r\n    return res.status(409).json({\r\n      status: 409,\r\n      error: 'User already exists'\r\n    });\r\n  }\r\n\r\n  static signin(req, res) {\r\n    const { email, password } = req.body;\r\n    const findUser = users.find(u => u.email === email);\r\n    if (!findUser) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'User with provided email doesnt exist'\r\n      });\r\n    }\r\n    if (bcrypt.compareSync(password, findUser.password)) {\r\n      return res.status(200).json({\r\n        status: 200,\r\n        token: tokengenerator(email),\r\n        message: 'User successfully logged in'\r\n      });\r\n    }\r\n    return res.status(401).json({\r\n      status: 401,\r\n      error: 'Password is incorrect'\r\n    });\r\n  }\r\n}\r\nexport default userController;\r\n"]}
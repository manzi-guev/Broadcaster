{"version":3,"sources":["userController.js"],"names":["userController","req","res","body","firstname","lastname","email","phonenumber","username","password","passwd","bcrypt","hashSync","role","newUser","con","query","users","insertUser","finduser","findUser","rolechecker","rows","rowCount","status","json","token","message","data","error","compareSync"],"mappings":"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","file":"userController.js","sourceRoot":"C:/Users/CharisUAS/Desktop/Broadcaster/server/v2/controllers","sourcesContent":["/* eslint-disable consistent-return */\r\n/* eslint-disable no-else-return */\r\n/* eslint-disable lines-between-class-members */\r\n/* eslint-disable node/no-unsupported-features/es-syntax */\r\nimport bcrypt from 'bcryptjs';\r\nimport con from '../db/connection';\r\nimport users from '../models/users';\r\nimport tokengenerator from '../helpers/helperToken';\r\n\r\nclass userController {\r\n  static async signup(req, res) {\r\n    const {\r\n      firstname,\r\n      lastname,\r\n      email,\r\n      phonenumber,\r\n      username,\r\n      password\r\n    } = req.body;\r\n    const passwd = bcrypt.hashSync(password, 10);\r\n    const role = 'user';\r\n    const newUser = await con.query(users.insertUser, [\r\n      firstname,\r\n      lastname,\r\n      email,\r\n      phonenumber,\r\n      username,\r\n      passwd,\r\n      role\r\n    ]);\r\n    const finduser = await con.query(users.findUser, [email]);\r\n    const rolechecker = finduser.rows[0].role;\r\n    if (newUser.rowCount === 1) {\r\n      return res.status(201).json({\r\n        status: 201,\r\n        token: tokengenerator(email, rolechecker),\r\n        message: 'User succesfully created',\r\n        data: {\r\n          firstname: finduser.rows[0].firstname,\r\n          lastname: finduser.rows[0].lastname,\r\n          email: finduser.rows[0].email,\r\n          phonenumber: finduser.rows[0].phonenumber,\r\n          username: finduser.rows[0].username,\r\n          role: finduser.rows[0].role\r\n        }\r\n      });\r\n    } else {\r\n      res.status(409).json({\r\n        status: 409,\r\n        error: 'User already exists'\r\n      });\r\n    }\r\n  }\r\n  static async signin(req, res) {\r\n    const { email, password } = req.body;\r\n    const finduser = await con.query(users.findUser, [email]);\r\n    if (finduser.rowCount === 0) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'User with provided email doesnt exist'\r\n      });\r\n    } else {\r\n      if (\r\n        bcrypt.compareSync(password, finduser.rows[0].password) ||\r\n        password === finduser.rows[0].password\r\n      ) {\r\n        return res.status(200).json({\r\n          status: 200,\r\n          token: tokengenerator(email),\r\n          message: 'User successfully logged in'\r\n        });\r\n      }\r\n      return res.status(401).json({\r\n        status: 401,\r\n        error: 'Password is incorrect'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default userController;\r\n"]}
{"version":3,"sources":["redflagController.js"],"names":["redflagController","req","res","body","title","type","comment","location","status","images","videos","newRedflag","id","redflags","length","createdOn","format","createdBy","header","push","json","message","data","all","find","flag","error","parseInt","params","foundRedflagIndex","splice","indexOf","redflag"],"mappings":"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","file":"redflagController.js","sourceRoot":"C:/Users/CharisUAS/Desktop/Broadcaster/server/controllers","sourcesContent":["/* eslint-disable consistent-return */\r\n/* eslint-disable node/no-unsupported-features/es-syntax */\r\nimport moment from 'moment';\r\nimport redflags from '../models/redflags';\r\nimport taketoken from '../helpers/token.verifier';\r\n\r\nclass redflagController {\r\n  static create(req, res) {\r\n    const { title, type, comment, location, status, images, videos } = req.body;\r\n    const newRedflag = {\r\n      id: redflags.length + 1,\r\n      createdOn: moment().format('MMMM Do YYYY, h:mm:ss a'),\r\n      createdBy: taketoken(req.header('token')),\r\n      title,\r\n      type,\r\n      comment,\r\n      location,\r\n      status,\r\n      images,\r\n      videos\r\n    };\r\n    redflags.push(newRedflag);\r\n    return res.status(201).json({\r\n      status: 201,\r\n      message: 'Redflag successfully created',\r\n      data: newRedflag\r\n    });\r\n  }\r\n\r\n  static viewredflags(req, res) {\r\n    const all = redflags.find(flag => flag.id);\r\n    if (!all) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Redflags not found'\r\n      });\r\n    }\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Success. List of all red-flags',\r\n      data: redflags\r\n    });\r\n  }\r\n\r\n  static viewSpecificflag(req, res) {\r\n    const id = parseInt(req.params.id, 10);\r\n    const foundRedflagIndex = redflags.find(flag => flag.id === id);\r\n    if (foundRedflagIndex) {\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: foundRedflagIndex\r\n      });\r\n    }\r\n    return res.status(404).json({\r\n      status: 404,\r\n      error: 'Redflag not found'\r\n    });\r\n  }\r\n\r\n  static delete(req, res) {\r\n    const id = parseInt(req.params.id, 10);\r\n    const foundRedflagIndex = redflags.find(flag => flag.id === id);\r\n    /* istanbul ignore else */\r\n    if (foundRedflagIndex) {\r\n      redflags.splice(redflags.indexOf(foundRedflagIndex), 1);\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: 'Redflag successfully deleted'\r\n      });\r\n    }\r\n  }\r\n\r\n  static editLocation(req, res) {\r\n    const id = parseInt(req.params.id, 10);\r\n    const redflag = redflags.find(flag => flag.id === id);\r\n    /* istanbul ignore else */\r\n    if (redflag) {\r\n      redflag.location = req.body.location;\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: 'Updated red-flag location',\r\n        data: {\r\n          id: redflag.id,\r\n          location: redflag.location\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  static editComment(req, res) {\r\n    const id = parseInt(req.params.id, 10);\r\n    const redflag = redflags.find(flag => flag.id === id);\r\n    /* istanbul ignore else */\r\n    if (redflag) {\r\n      redflag.comment = req.body.comment;\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: 'Updated red-flag comment',\r\n        data: {\r\n          id: redflag.id,\r\n          comment: redflag.comment\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default redflagController;\r\n"]}
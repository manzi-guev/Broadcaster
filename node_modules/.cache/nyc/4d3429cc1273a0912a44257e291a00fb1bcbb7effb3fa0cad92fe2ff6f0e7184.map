{"version":3,"sources":["userController.js"],"names":["userController","req","res","body","firstname","lastname","email","phonenumber","username","password","passwd","bcrypt","hashSync","newUser","con","query","users","insertUser","finduser","findUser","rowCount","status","json","token","message","data","rows","error","compareSync"],"mappings":";;;;;;qjBAAA;AACA;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEMA,c;;;;;;;iCACgBC,G,EAAKC,G,EAAK;AAAA,sBAQxBD,IAAIE,IARoB;AAAA,UAE1BC,SAF0B,aAE1BA,SAF0B;AAAA,UAG1BC,QAH0B,aAG1BA,QAH0B;AAAA,UAI1BC,KAJ0B,aAI1BA,KAJ0B;AAAA,UAK1BC,WAL0B,aAK1BA,WAL0B;AAAA,UAM1BC,QAN0B,aAM1BA,QAN0B;AAAA,UAO1BC,QAP0B,aAO1BA,QAP0B;;AAS5B,UAAMC,SAASC,mBAAOC,QAAP,CAAgBH,QAAhB,EAA0B,EAA1B,CAAf;AACA,UAAMI,UAAU,MAAMC,qBAAIC,KAAJ,CAAUC,gBAAMC,UAAhB,EAA4B,CAChDb,SADgD,EAEhDC,QAFgD,EAGhDC,KAHgD,EAIhDC,WAJgD,EAKhDC,QALgD,EAMhDE,MANgD,CAA5B,CAAtB;AAQA,UAAMQ,WAAW,MAAMJ,qBAAIC,KAAJ,CAAUC,gBAAMG,QAAhB,EAA0B,CAACb,KAAD,CAA1B,CAAvB;AACA,UAAIO,QAAQO,QAAR,KAAqB,CAAzB,EAA4B;AAC1B,eAAOlB,IAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,iBAAO,qBAAejB,KAAf,CAFmB;AAG1BkB,mBAAS,0BAHiB;AAI1BC,gBAAM;AACJrB,uBAAWc,SAASQ,IAAT,CAAc,CAAd,EAAiBtB,SADxB;AAEJC,sBAAUa,SAASQ,IAAT,CAAc,CAAd,EAAiBrB,QAFvB;AAGJC,mBAAOY,SAASQ,IAAT,CAAc,CAAd,EAAiBpB,KAHpB;AAIJC,yBAAaW,SAASQ,IAAT,CAAc,CAAd,EAAiBnB,WAJ1B;AAKJC,sBAAUU,SAASQ,IAAT,CAAc,CAAd,EAAiBlB;AALvB;AAJoB,SAArB,CAAP;AAYD;AACDN,UAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,gBAAQ,GADW;AAEnBM,eAAO;AAFY,OAArB;AAID;;;iCAEmB1B,G,EAAKC,G,EAAK;AAAA,uBACAD,IAAIE,IADJ;AAAA,UACpBG,KADoB,cACpBA,KADoB;AAAA,UACbG,QADa,cACbA,QADa;;AAE5B,UAAMS,WAAW,MAAMJ,qBAAIC,KAAJ,CAAUC,gBAAMG,QAAhB,EAA0B,CAACb,KAAD,CAA1B,CAAvB;AACA,UAAIY,SAASE,QAAT,KAAsB,CAA1B,EAA6B;AAC3B,eAAOlB,IAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BM,iBAAO;AAFmB,SAArB,CAAP;AAID;AACD,UAAIhB,mBAAOiB,WAAP,CAAmBnB,QAAnB,EAA6BS,SAASQ,IAAT,CAAc,CAAd,EAAiBjB,QAA9C,CAAJ,EAA6D;AAC3D,eAAOP,IAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,iBAAO,qBAAejB,KAAf,CAFmB;AAG1BkB,mBAAS;AAHiB,SAArB,CAAP;AAKD;AACD,aAAOtB,IAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BM,eAAO;AAFmB,OAArB,CAAP;AAID;;;;;;kBAEY3B,c","file":"userController.js","sourceRoot":"C:/Users/CharisUAS/Desktop/Broadcaster/server/v2/controllers","sourcesContent":["/* eslint-disable consistent-return */\r\n/* eslint-disable node/no-unsupported-features/es-syntax */\r\nimport bcrypt from 'bcryptjs';\r\nimport con from '../db/connection';\r\nimport users from '../models/users';\r\nimport tokengenerator from '../helpers/token.helper';\r\n\r\nclass userController {\r\n  static async signup(req, res) {\r\n    const {\r\n      firstname,\r\n      lastname,\r\n      email,\r\n      phonenumber,\r\n      username,\r\n      password\r\n    } = req.body;\r\n    const passwd = bcrypt.hashSync(password, 10);\r\n    const newUser = await con.query(users.insertUser, [\r\n      firstname,\r\n      lastname,\r\n      email,\r\n      phonenumber,\r\n      username,\r\n      passwd\r\n    ]);\r\n    const finduser = await con.query(users.findUser, [email]);\r\n    if (newUser.rowCount === 1) {\r\n      return res.status(201).json({\r\n        status: 201,\r\n        token: tokengenerator(email),\r\n        message: 'User succesfully created',\r\n        data: {\r\n          firstname: finduser.rows[0].firstname,\r\n          lastname: finduser.rows[0].lastname,\r\n          email: finduser.rows[0].email,\r\n          phonenumber: finduser.rows[0].phonenumber,\r\n          username: finduser.rows[0].username\r\n        }\r\n      });\r\n    }\r\n    res.status(409).json({\r\n      status: 409,\r\n      error: 'User already exists'\r\n    });\r\n  }\r\n\r\n  static async signin(req, res) {\r\n    const { email, password } = req.body;\r\n    const finduser = await con.query(users.findUser, [email]);\r\n    if (finduser.rowCount === 0) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'User with provided email doesnt exist'\r\n      });\r\n    }\r\n    if (bcrypt.compareSync(password, finduser.rows[0].password)) {\r\n      return res.status(200).json({\r\n        status: 200,\r\n        token: tokengenerator(email),\r\n        message: 'User successfully logged in'\r\n      });\r\n    }\r\n    return res.status(401).json({\r\n      status: 401,\r\n      error: 'Password is incorrect'\r\n    });\r\n  }\r\n}\r\nexport default userController;\r\n"]}